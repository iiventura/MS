package presentacion.vistas.vistaCompra;

import presentacion.comandos.listadecomandos.ListaComandos;
import presentacion.controlador.Controlador;
import presentacion.vistas.vistaCalendario.Calendario;
import presentacion.vistas.vistaCalendario.DateLabelFormatter;

import java.awt.event.ActionEvent;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;





import javax.swing.JOptionPane;






import negocio.compra.TCompra;
import negocio.compra.TLineaCompra;
import negocio.tipoVivienda.TTipoVivienda;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author usuario_local
 */
@SuppressWarnings("serial")
public class CompraGUI02 extends javax.swing.JFrame {

	ArrayList<TTipoVivienda> viviendasDisponibles;
	ArrayList<TLineaCompra> viviendasPorComprar;
	TCompra compra;
	boolean consultar = false;
    /**
     * Creates new form NewJFrame
     */
    public CompraGUI02() {
    	viviendasDisponibles = new ArrayList<>();
		viviendasPorComprar = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabelTitulo = new javax.swing.JLabel();
        jLabelIDCompra = new javax.swing.JLabel();
        jLabelIDCliente = new javax.swing.JLabel();
        jLabelFecha = new javax.swing.JLabel();
        jLabelActivo = new javax.swing.JLabel();
        jLabelCantidad = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTViviendasDisponibles = new javax.swing.JList<>();
        Subtitulo1 = new javax.swing.JLabel();
        jTextFieldIDCompra = new javax.swing.JTextField();
        jTextFieldIDCliente = new javax.swing.JTextField();
        jCheckBoxActivo = new javax.swing.JCheckBox();
        jTextFieldCantidad = new javax.swing.JTextField();
        jPanelDate = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaCarrito = new javax.swing.JTextArea();
        Subtitulo2 = new javax.swing.JLabel();
        jButtonAltaCompra = new java.awt.Button();
        jButtonBajaCompra = new java.awt.Button();
        jButtonAnadirCarrito = new java.awt.Button();
        jButtonVaciarCarrito = new java.awt.Button();
        jButtonMostrarCompra = new java.awt.Button();
        jButtonListarCompra = new java.awt.Button();
        jButtonAnadirViviendasACompra = new java.awt.Button();
        jButtonSalirCompra = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
       // setPreferredSize(new java.awt.Dimension(1200, 550));

        jLabelTitulo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelTitulo.setText("COMPRA");

        jLabelIDCompra.setText("ID COMPRA:");

        jLabelIDCliente.setText("ID CLIENTE:");

        jLabelFecha.setText("FECHA:");

        jLabelActivo.setText("ACTIVO:");

        jLabelCantidad.setText("CANTIDAD T.VIVIENDA:");

        jScrollPane1.setViewportView(jListTViviendasDisponibles);

        Subtitulo1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Subtitulo1.setText("T.Viviendas Disponibles");

        
        fecha = new Calendario();
        
        javax.swing.GroupLayout jPanelDateLayout = new javax.swing.GroupLayout(jPanelDate);
        jPanelDate.setLayout(jPanelDateLayout);
        jPanelDateLayout.setHorizontalGroup(
            jPanelDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
            .addComponent(fecha.getCal())
        );
        jPanelDateLayout.setVerticalGroup(
            jPanelDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
            .addComponent(fecha.getCal())
        );

        jTextAreaCarrito.setColumns(20);
        jTextAreaCarrito.setRows(5);
        jScrollPane2.setViewportView(jTextAreaCarrito);

        Subtitulo2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Subtitulo2.setText("Carrito de la Compra");

       
        jButtonAltaCompra.setLabel("ALTA COMPRA");
        jButtonAltaCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAltaCompraActionPerformed(evt);
            }

			
        });
        
        jButtonBajaCompra.setLabel("BAJA COMPRA");
        jButtonBajaCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBajarCompraActionPerformed(evt);
            }

        });

        jButtonAnadirCarrito.setLabel("AÑADIR CARRITO");
        jButtonAnadirCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnadirCarritoActionPerformed(evt);
            }
        });

        jButtonVaciarCarrito.setLabel("VACIAR CARRITO");
        jButtonVaciarCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVaciarCarritoActionPerformed(evt);
            }
        });

        jButtonMostrarCompra.setLabel("CONSULTAR COMPRA");
        jButtonMostrarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarCompraActionPerformed(evt);
            }
        });

        jButtonListarCompra.setLabel("LISTAR COMPRAS");
        jButtonListarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListarCompraActionPerformed(evt);
            }
        });

        jButtonAnadirViviendasACompra.setLabel("AÑADIR VIVIENDAS A COMPRA");
        jButtonAnadirViviendasACompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jButtonAnadirViviendasACompraActionPerformed(evt);
            }
        });

        jButtonSalirCompra.setLabel("SALIR");
        jButtonSalirCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirCompraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addComponent(jLabelTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelIDCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelIDCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(69, 69, 69))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelActivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(2, 2, 2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jTextFieldIDCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxActivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanelDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jTextFieldIDCliente))))
                        .addGap(0, 19, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonAnadirViviendasACompra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(jButtonMostrarCompra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAnadirCarrito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAltaCompra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonBajaCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(jButtonVaciarCarrito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonListarCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSalirCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(Subtitulo1)
                            .addGap(82, 82, 82))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(24, 24, 24)))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Subtitulo2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitulo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelIDCompra)
                            .addComponent(Subtitulo1)
                            .addComponent(jTextFieldIDCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelIDCliente)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextFieldIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFecha)
                            .addComponent(jPanelDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelActivo)
                            .addComponent(jCheckBoxActivo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCantidad)
                            .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(Subtitulo2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonBajaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAltaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAnadirCarrito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonVaciarCarrito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonMostrarCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonListarCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAnadirViviendasACompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSalirCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

      
        pack();
    }// </editor-fold>         
    
    public void mensaje(String mensaje, String status){
		if(status=="Exito"){
		   JOptionPane.showMessageDialog(this, mensaje, status, JOptionPane.INFORMATION_MESSAGE);
		}
		else if(status=="Error"){
		   JOptionPane.showMessageDialog(this, mensaje, status, JOptionPane.ERROR_MESSAGE);
		}

	}
    
    private void limpiarComponentes(){
    	this.jCheckBoxActivo.setSelected(false);
    	this.jTextAreaCarrito.setText("");
    	this.jTextFieldCantidad.setText("");
    	this.jTextFieldIDCliente.setText("");
    	this.jTextFieldIDCompra.setText("");
    	this.fecha.setFechaActual();
    
    }

    public void actualizaVista() {
		Controlador.getInstance().run(ListaComandos.VISTAACTUALIZACOMPRA, 0);
	}
    
	public void setIdField(int id){
		String idAux = Integer.toString(id);
		this.jTextFieldIDCompra.setText(idAux);
	}
	public void setCarrito(ArrayList<TLineaCompra> lista) {
   		this.viviendasPorComprar = lista;
   	}
	// Rellenar el campo de la lista
	public void setListFieldViviendas(Collection<TLineaCompra> collection) {
		String temp;
		for (TLineaCompra viv : collection) {
			temp = viv.toString();
			this.jTextAreaCarrito.append(temp + "\n");
		}
	}
	public void setListFieldCompras(ArrayList<TCompra> lista) {
		String temp;
		for (TCompra com : lista) {
			temp = com.toString();
			this.jTextAreaCarrito.append(temp + "\n");
		}
	}
	   	
	public void setCompraFields(TCompra compra, String mensaje){
		String temp;
		temp=mensaje+"\n";
		temp+=compra.toString();
		
		this.jTextAreaCarrito.append(temp);
	}
		

	public void actualizaListaViviendas(ArrayList<TTipoVivienda> listaViviendas) {
		this.viviendasDisponibles = listaViviendas;
		this.jListTViviendasDisponibles.setModel(new javax.swing.AbstractListModel<String>() {
			TTipoVivienda[] viviendas = viviendasDisponibles.toArray(new TTipoVivienda[viviendasDisponibles.size()]);
			public int getSize() { return viviendas.length; }
			public String getElementAt(int i) { return "ID: " + viviendas[i].getId() + ".   Dirección: " 
					+ viviendas[i].getDireccion() + ".   Cantidad: " + viviendas[i].getCantidad(); }
		});	
	}
		
    protected void jButtonSalirCompraActionPerformed(ActionEvent evt) {
    	limpiarComponentes();
    	this.viviendasPorComprar = new ArrayList<>();
    	Controlador.getInstance().run(ListaComandos.CERRARVISTACOMPRA, null);
	}

	protected void jButtonAnadirViviendasACompraActionPerformed(ActionEvent evt) {
		if (this.jTextFieldIDCompra.getText().isEmpty()){
    		JOptionPane.showMessageDialog(this, "Rellena los campos correctamente", "Error", JOptionPane.ERROR_MESSAGE);
    	}
		else if (this.viviendasPorComprar.size() == 0){
			JOptionPane.showMessageDialog(this, "No tiene viviendas para añadir a la compra.", "Error", JOptionPane.ERROR_MESSAGE);
		}
		else{
    		int idComp = Integer.parseInt(jTextFieldIDCompra.getText());

			HashMap<Integer, TLineaCompra> lineaCompra = new HashMap<Integer, TLineaCompra>();
    		for(int i = 0; i < this.viviendasPorComprar.size(); i++) {
    			lineaCompra.put(i, viviendasPorComprar.get(i));
    		}
	    		
    		TCompra tComp = new TCompra(idComp, lineaCompra);
    		
    		Controlador.getInstance().run(ListaComandos.ANADIRVIVIENDASACOMPRACERRADA, tComp);
    		this.viviendasPorComprar = new ArrayList<>();
    		this.actualizaVista();
    		limpiarComponentes();
    	}
	}

	protected void jButtonListarCompraActionPerformed(ActionEvent evt) {
		if(this.viviendasPorComprar.size() != 0){
			compra = null;
			this.viviendasPorComprar = new ArrayList<>();
			actualizaVista();
		}
		limpiarComponentes();
    	Controlador.getInstance().run(ListaComandos.LISTARCOMPRA, 0);
		
	}

	protected void jButtonMostrarCompraActionPerformed(ActionEvent evt) {
		consultar = true;
		if(this.viviendasPorComprar.size() != 0){
			compra = null;
			this.viviendasPorComprar = new ArrayList<>();
			
			if (!jTextFieldIDCompra.getText().isEmpty()){
				int temp = Integer.parseInt(jTextFieldIDCompra.getText());
				limpiarComponentes();
				actualizaVista();
				jTextFieldIDCompra.setText(Integer.toString(temp));
	    	} 
		
		}
		if (jTextFieldIDCompra.getText().isEmpty()){
    		JOptionPane.showMessageDialog(this, "Por favor indica el id de la Compra.", "Error", JOptionPane.ERROR_MESSAGE);
    	} 
    	else{
    		try {
        		int id = Integer.parseInt(jTextFieldIDCompra.getText());
        		if(id <= 0){
    	    		JOptionPane.showMessageDialog(this, "El ID debe ser un numero positivo", "Error", JOptionPane.ERROR_MESSAGE);
    	    		limpiarComponentes();
        		}
        		else{
        			limpiarComponentes();
		    		Controlador.getInstance().run(ListaComandos.CONSULTARCOMPRA, id);
        		}
			} catch (NumberFormatException excepcion) {
				JOptionPane.showMessageDialog(this, "El campo ID CLIENTE debe ser un número entero", "Error",
						JOptionPane.ERROR_MESSAGE);
			}
    	}
	}

	protected void jButtonVaciarCarritoActionPerformed(ActionEvent evt) {
		if(this.viviendasPorComprar.size() != 0){
			compra = null;
			this.viviendasPorComprar = new ArrayList<>();
			limpiarComponentes();
			actualizaVista();			
		
		}
	}

	protected void jButtonAnadirCarritoActionPerformed(ActionEvent evt) {
		try {
			
			if(this.consultar){
				this.consultar = false;
				this.viviendasPorComprar = new ArrayList<>();
			}
    		if(jTextFieldCantidad.getText().isEmpty()){
	    		JOptionPane.showMessageDialog(this, "Elige cuantas viviendas quiere comprar", "Error", JOptionPane.ERROR_MESSAGE);
	    	} else if (Integer.valueOf(jTextFieldCantidad.getText()) <= 0) {
	    		JOptionPane.showMessageDialog(this, "Elige una cantidad válida", "Error", JOptionPane.ERROR_MESSAGE);
	    	} else {
	    		int index = this.jListTViviendasDisponibles.getSelectedIndex();
	    		if(index == -1){
	    			JOptionPane.showMessageDialog(this, "Elige una vivienda disponible", "Error", JOptionPane.ERROR_MESSAGE);
	    		}
	    		
	    		else{
	    			int cantidad = Integer.parseInt(jTextFieldCantidad.getText());
		    		TTipoVivienda tVivienda = this.viviendasDisponibles.get(index);
		    		 
		    		int existe = -1;
		    		//Comprobar que si añade mas de una vez TipoVivienda i
		    		for(int i = 0; i < this.viviendasPorComprar.size(); i++){
		    			if(viviendasPorComprar.get(i).getId() == tVivienda.getId())
		    				existe = i;
		    		}
		    		 
		    		//Si no esta en el carrito de la compra y la cantidad es correcta
		    		 if(existe == -1 && tVivienda.getCantidad() >= cantidad) {
		    			 TLineaCompra temp = new TLineaCompra(tVivienda.getId(), cantidad, tVivienda.getPrecio() * cantidad) ;
		    			 this.viviendasPorComprar.add(temp);
		    			 tVivienda.setCantidad(tVivienda.getCantidad() - cantidad);
		    			 
		    			 if(tVivienda.getCantidad() == 0){
		    				 this.viviendasDisponibles.remove(tVivienda);
		    			 }
		    			 
		    			 
		    			 actualizaListaViviendas(this.viviendasDisponibles);
		    			 
		    			
		    			 
		    		 } 
		    		 //Si esta en el carrito de la compra y la cantidad es correcta
		    		 else if(existe > -1 && tVivienda.getCantidad() >= cantidad) {
		    			 this.viviendasPorComprar.get(existe).setCantidadComprada(cantidad + viviendasPorComprar.get(existe).getCantidadComprada());
		    			 this.viviendasDisponibles.get(existe).setCantidad(tVivienda.getCantidad() - cantidad);
		    			 actualizaListaViviendas(this.viviendasDisponibles);
		    			 
		    			 if(this.viviendasDisponibles.get(existe).getCantidad() == 0){
		    				 this.viviendasDisponibles.remove(tVivienda);
		    			 }
		    			 
		    			 actualizaListaViviendas(this.viviendasDisponibles);
		    			 
		    		 } 
		    		 else {
		    			 JOptionPane.showMessageDialog(this, "Está eligiendo demasiadas viviendas de ese tipo", "Error", JOptionPane.ERROR_MESSAGE);
		    		 }
		    		 
		    		 
		    		 String compra = "";
		    		 
		    		 for(TLineaCompra t: this.viviendasPorComprar) {
		    			 compra += t.toString();
		    		 }
		    		 this.jTextAreaCarrito.setText(compra);
	    		}
	    		
	    	 }
    		this.jTextFieldCantidad.setText("");
        } catch (NumberFormatException excepcion) {
    		JOptionPane.showMessageDialog(this, "El campo Cantidad debe ser un número entero", "Error", JOptionPane.ERROR_MESSAGE);
        }
	}

                                           

    @SuppressWarnings("deprecation")
	private void jButtonAltaCompraActionPerformed(ActionEvent evt) {
		if (this.fecha.isEmpty()) {
			JOptionPane.showMessageDialog(this, "Rellena los campos correctamente.", "Error", JOptionPane.ERROR_MESSAGE);
		} else {
			if (this.viviendasPorComprar.size() == 0 && this.jLabelIDCompra.getText().isEmpty()){
				JOptionPane.showMessageDialog(this, "La compra no tiene viviendas.", "Error", JOptionPane.ERROR_MESSAGE);
			} else {
				try {
					Date f = (Date) DateLabelFormatter.toDate(this.fecha.getFecha());
					Calendar c=Calendar.getInstance();
					java.util.Date today=c.getTime();//fecha actual 
		    		if(f.getYear()>today.getYear()){
						JOptionPane.showMessageDialog(this, "La fecha es incorrecta, por favor coloque una menor o igual a la actual.", "Error", JOptionPane.ERROR_MESSAGE);
	    			}else{
	    				int idCli =Integer.parseInt(jTextFieldIDCliente.getText());
	    				
	    				HashMap<Integer, TLineaCompra> lineaCompra = new HashMap<Integer, TLineaCompra>();
			    		for(int i = 0; i < this.viviendasPorComprar.size(); i++) {
			    			lineaCompra.put(i, viviendasPorComprar.get(i));
			    		}
			    		
			    		int idCom;
			    		if(jTextFieldIDCompra.getText().isEmpty()) {
			    			idCom = -1;
			    		}
			    		else
			    			idCom = Integer.parseInt(jTextFieldIDCompra.getText());
	    				compra = new TCompra(idCom, idCli, f, true, lineaCompra);
			    		Controlador.getInstance().run(ListaComandos.ALTACOMPRA, compra);
			    		compra = null;
			    		this.viviendasPorComprar = new ArrayList<>();
			    		this.actualizaVista();
			    		limpiarComponentes();
	    			}
			    		
	            } catch (NumberFormatException excepcion) {
	        		JOptionPane.showMessageDialog(this, "El campo ID CLIENTE debe ser un número entero", "Error", JOptionPane.ERROR_MESSAGE);
	            }	
	    	}
		}
	}
    
	private void jButtonBajarCompraActionPerformed(ActionEvent evt) {
		try{
			if(this.viviendasPorComprar.size() != 0){
				if (!jTextFieldIDCompra.getText().isEmpty()) {
					int temp = Integer.parseInt(jTextFieldIDCompra.getText());
					compra = null;
					this.viviendasPorComprar = new ArrayList<>();
					actualizaVista();
					limpiarComponentes();
					jTextFieldIDCompra.setText(Integer.toString(temp));
				}	
			}
			if (jTextFieldIDCompra.getText().isEmpty()) {
				JOptionPane.showMessageDialog(this, "Por favor indica el id de la Compra.", "Error",
						JOptionPane.ERROR_MESSAGE);
			} 
			else {

					if (Integer.parseInt(jTextFieldIDCompra.getText()) > 0) {
						int id = Integer.parseInt(jTextFieldIDCompra.getText());
						Controlador.getInstance().run(ListaComandos.BAJACOMPRA, id);
						this.actualizaVista();
						limpiarComponentes();
					} else {
						JOptionPane.showMessageDialog(this, "Id de la Compra debe ser un valor positivo.", "Error",
								JOptionPane.ERROR_MESSAGE);
					}
			}
		}

		 catch (NumberFormatException excepcion) {
				JOptionPane.showMessageDialog(this, "El campo ID CLIENTE debe ser un número entero", "Error",
						JOptionPane.ERROR_MESSAGE);
		}
		
	}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompraGUI02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompraGUI02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompraGUI02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompraGUI02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompraGUI02().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel Subtitulo1;
    private javax.swing.JLabel Subtitulo2;
    private java.awt.Button jButtonBajaCompra;
    private java.awt.Button jButtonAnadirCarrito;
    private java.awt.Button jButtonVaciarCarrito;
    private java.awt.Button jButtonMostrarCompra;
    private java.awt.Button jButtonListarCompra;
    private java.awt.Button jButtonAnadirViviendasACompra;
    private java.awt.Button jButtonSalirCompra;
    private java.awt.Button  jButtonAltaCompra;
    private javax.swing.JCheckBox jCheckBoxActivo;
    private javax.swing.JLabel jLabelActivo;
    private javax.swing.JLabel jLabelCantidad;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelIDCliente;
    private javax.swing.JLabel jLabelIDCompra;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JList<String> jListTViviendasDisponibles;
    private javax.swing.JPanel jPanelDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaCarrito;
    private javax.swing.JTextField jTextFieldCantidad;
    private javax.swing.JTextField jTextFieldIDCliente;
    private javax.swing.JTextField jTextFieldIDCompra;
    private Calendario fecha;
    // End of variables declaration                   
}

